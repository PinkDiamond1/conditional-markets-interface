if: (branch = development) OR (branch = master) OR (branch = release/alpha) OR (type = pull_request) OR (tag IS present)
language: node_js
node_js: '12'
before_install:
  - npm install
  # Needed to deploy pull request and releases
  - pip install awscli --upgrade --user
cache:
  directories:
  - "$HOME/.npm"
install:
   - npm install -g sass@1.22.10
before_script:
    # ONBOARDING_MODE="TIERED" to enable tiered onboarding testing/dev
  - if [ "$TRAVIS_BRANCH" == "development" ]; then export NETWORK="rinkeby" NODE_ENV=development;
    else export NETWORK="mainnet" NODE_ENV=production;
    fi;
  - npm run compile && npm run build
matrix:
  include:
  - if: branch =~ /^master$/ OR tag IS present
    env:
      - DEPLOY_ENV=production
      - WHITELIST_API=https://sight-whitelist.gnosis.io/api
      - OPERATOR_API=https://sight-operator.gnosis.io/api
  - if: branch =~ /^master$/ OR tag IS present
    env:
      - DEPLOY_ENV=staging
      - WHITELIST_API=https://sight-whitelist.mainnet.staging.gnosisdev.com/api
      - OPERATOR_API=https://sight-operator.staging.gnosisdev.com/api
  - if: NOT (branch =~ /^master$/) AND NOT (tag IS present)
    env: WHITELIST_API=https://sight-whitelist.staging.gnosisdev.com/api

script:
  - echo "Skip tests" # no test cases for the project

deploy:
  # DEVELOPMENT deployment
  - provider: s3
    bucket: $DEV_BUCKET_NAME
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    skip_cleanup: true
    local_dir: dist
    upload-dir: markets
    on:
      branch: development

  # STAGING deployment
  - provider: s3
    bucket: $STAGING_BUCKET_NAME
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    skip_cleanup: true
    local_dir: dist
    upload-dir: current/markets
    on:
      branch: master
      condition: $DEPLOY_ENV = staging

  # STAGING_WITH_LANDING deployment
  - provider: s3
    bucket: $STAGING_WITH_LANDING_BUCKET_NAME
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    skip_cleanup: true
    local_dir: dist
    upload-dir: current/app
    on:
      branch: master
      condition: $DEPLOY_ENV = production

  # ALPHA STAGING deployment
  - provider: s3
    bucket: $ALPHA_BUCKET_NAME
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    skip_cleanup: true
    local_dir: dist
    upload-dir: current
    on:
      branch: release/alpha

  # Prepare legacy production deployment
  - provider: s3
    bucket: $STAGING_BUCKET_NAME
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    skip_cleanup: true
    local_dir: dist
    upload-dir: releases/$TRAVIS_TAG
    on:
      tags: true
  - provider: script
    script: bash travis/prepare_production_deployment.sh
    on:
      tags: true

  # Prepare alpha production deployment
  - provider: s3
    bucket: $STAGING_BUCKET_NAME
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    skip_cleanup: true
    local_dir: dist
    upload-dir: releases/alpha
    on:
      branch: release/alpha

  - provider: script
    script: TRAVIS_TAG=alpha bash travis/prepare_production_deployment.sh
    on:
      branch: release/alpha
