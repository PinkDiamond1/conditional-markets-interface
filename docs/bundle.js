!function(Q){function F(F){for(var U,I,C=F[0],t=F[1],g=0,n=[];g<C.length;g++)I=C[g],B[I]&&n.push(B[I][0]),B[I]=0;for(U in t)Object.prototype.hasOwnProperty.call(t,U)&&(Q[U]=t[U]);for(s&&s(F);n.length;)n.shift()()}var U={},B={2:0};function I(F){if(U[F])return U[F].exports;var B=U[F]={i:F,l:!1,exports:{}};return Q[F].call(B.exports,B,B.exports,I),B.l=!0,B.exports}I.e=function(Q){var F=[],U=B[Q];if(0!==U)if(U)F.push(U[2]);else{var C=new Promise(function(F,I){U=B[Q]=[F,I]});F.push(U[2]=C);var t,g=document.createElement("script");g.charset="utf-8",g.timeout=120,I.nc&&g.setAttribute("nonce",I.nc),g.src=function(Q){return I.p+""+Q+".bundle.js"}(Q),t=function(F){g.onerror=g.onload=null,clearTimeout(s);var U=B[Q];if(0!==U){if(U){var I=F&&("load"===F.type?"missing":F.type),C=F&&F.target&&F.target.src,t=new Error("Loading chunk "+Q+" failed.\n("+I+": "+C+")");t.type=I,t.request=C,U[1](t)}B[Q]=void 0}};var s=setTimeout(function(){t({type:"timeout",target:g})},12e4);g.onerror=g.onload=t,document.head.appendChild(g)}return Promise.all(F)},I.m=Q,I.c=U,I.d=function(Q,F,U){I.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},I.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},I.t=function(Q,F){if(1&F&&(Q=I(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(I.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var B in Q)I.d(U,B,function(F){return Q[F]}.bind(null,B));return U},I.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return I.d(F,"a",F),F},I.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},I.p="/hg-first-decentralized-market/",I.oe=function(Q){throw console.error(Q),Q};var C=window.webpackJsonp=window.webpackJsonp||[],t=C.push.bind(C);C.push=F,C=C.slice();for(var g=0;g<C.length;g++)F(C[g]);var s=t;I(I.s=0)}([function(module,exports,__webpack_require__){eval('__webpack_require__.e(/* import() */ 11).then(__webpack_require__.t.bind(null, 7, 7));\n__webpack_require__.e(/* import() */ 12).then(__webpack_require__.t.bind(null, 8, 7));\n\nfunction getNetworkName(networkId) {\n  // https://ethereum.stackexchange.com/a/17101\n  return {\n    [0]: "Olympic",\n    [1]: "Mainnet",\n    [2]: "Morden Classic",\n    [3]: "Ropsten",\n    [4]: "Rinkeby",\n    [5]: "Goerli",\n    [6]: "Kotti Classic",\n    [8]: "Ubiq",\n    [42]: "Kovan",\n    [60]: "GoChain",\n    [77]: "Sokol",\n    [99]: "Core",\n    [100]: "xDai",\n    [31337]: "GoChain testnet",\n    [401697]: "Tobalaba",\n    [7762959]: "Musicoin",\n    [61717561]: "Aquachain"\n  }[networkId] || `Network ID ${networkId}`;\n}\n\nasync function loadWeb3() {\n  const {\n    default: Web3\n  } = await Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(9)]).then(__webpack_require__.t.bind(null, 3, 7));\n  const web3 =  false ? undefined : typeof window.ethereum !== "undefined" ? (window.ethereum.enable(), new Web3(window.ethereum)) : new Web3(window.web3.currentProvider); // attempt to get the main account here\n  // so that web3 will emit an error if e.g.\n  // the localhost provider cannot be reached\n\n  const account = await getAccount(web3);\n  return {\n    web3,\n    account\n  };\n}\n\nasync function loadBasicData(web3, Decimal) {\n  const {\n    soliditySha3,\n    hexToUtf8\n  } = web3.utils;\n  const [{\n    lmsrAddress,\n    markets,\n    networkId\n  }, {\n    default: TruffleContract\n  }, {\n    product\n  }, ERC20DetailedArtifact, IDSTokenArtifact, WETH9Artifact, PredictionMarketSystemArtifact, LMSRMarketMakerArtifact] = await Promise.all([__webpack_require__.e(/* import() */ 15).then(__webpack_require__.t.bind(null, 9, 3)), Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(3), __webpack_require__.e(10)]).then(__webpack_require__.t.bind(null, 10, 7)), __webpack_require__.e(/* import() */ 16).then(__webpack_require__.bind(null, 6)), __webpack_require__.e(/* import() */ 18).then(__webpack_require__.t.bind(null, 11, 3)), __webpack_require__.e(/* import() */ 19).then(__webpack_require__.t.bind(null, 12, 3)), __webpack_require__.e(/* import() */ 22).then(__webpack_require__.t.bind(null, 13, 3)), __webpack_require__.e(/* import() */ 21).then(__webpack_require__.t.bind(null, 14, 3)), __webpack_require__.e(/* import() */ 20).then(__webpack_require__.t.bind(null, 15, 3))]);\n  const ERC20Detailed = TruffleContract(ERC20DetailedArtifact);\n  const IDSToken = TruffleContract(IDSTokenArtifact);\n  const WETH9 = TruffleContract(WETH9Artifact);\n  const PredictionMarketSystem = TruffleContract(PredictionMarketSystemArtifact);\n  const LMSRMarketMaker = TruffleContract(LMSRMarketMakerArtifact);\n\n  for (const Contract of [ERC20Detailed, IDSToken, WETH9, PredictionMarketSystem, LMSRMarketMaker]) {\n    Contract.setProvider(web3.currentProvider);\n  }\n\n  const lmsrMarketMaker = await LMSRMarketMaker.at(lmsrAddress);\n  const collateral = {};\n  collateral.address = await lmsrMarketMaker.collateralToken();\n  collateral.contract = await ERC20Detailed.at(collateral.address);\n\n  try {\n    collateral.name = await collateral.contract.name();\n    collateral.symbol = await collateral.contract.symbol();\n    collateral.decimals = (await collateral.contract.decimals()).toNumber();\n  } catch (e) {\n    collateral.contract = await IDSToken.at(collateral.address);\n    collateral.name = hexToUtf8((await collateral.contract.name()));\n    collateral.symbol = hexToUtf8((await collateral.contract.symbol()));\n    collateral.decimals = (await collateral.contract.decimals()).toNumber();\n  }\n\n  collateral.toUnitsMultiplier = new Decimal(10).pow(collateral.decimals);\n  collateral.fromUnitsMultiplier = new Decimal(10).pow(-collateral.decimals);\n  collateral.isWETH = collateral.name === "Wrapped Ether" && collateral.symbol === "WETH" && collateral.decimals === 18;\n  collateral.isDAI = collateral.name === "Dai Stablecoin v1.0" && collateral.symbol === "DAI" && collateral.decimals === 18;\n\n  if (collateral.isWETH) {\n    collateral.symbol = "\\u039E";\n    collateral.contract = await WETH9.at(collateral.address);\n  } else if (collateral.isDAI) {\n    collateral.symbol = "\\u25C8";\n  }\n\n  const pmSystem = await PredictionMarketSystem.deployed();\n  const atomicOutcomeSlotCount = (await lmsrMarketMaker.atomicOutcomeSlotCount()).toNumber();\n  let curAtomicOutcomeSlotCount = 1;\n\n  for (let i = 0; i < markets.length; i++) {\n    const market = markets[i];\n    const conditionId = await lmsrMarketMaker.conditionIds(i);\n    const numSlots = (await pmSystem.getOutcomeSlotCount(conditionId)).toNumber();\n    if (numSlots === 0) throw new Error(`condition ${conditionId} not set up yet`);\n    if (numSlots !== market.outcomes.length) throw new Error(`condition ${conditionId} outcome slot count ${numSlots} does not match market outcome descriptions array with length ${market.outcomes.length}`);\n    market.marketIndex = i;\n    market.conditionId = conditionId;\n    market.outcomes.forEach((outcome, i) => {\n      outcome.collectionId = soliditySha3({\n        t: "bytes32",\n        v: conditionId\n      }, {\n        t: "uint",\n        v: 1 << i\n      });\n    });\n    curAtomicOutcomeSlotCount *= numSlots;\n  }\n\n  if (curAtomicOutcomeSlotCount !== atomicOutcomeSlotCount) {\n    throw new Error(`mismatch in counted atomic outcome slot ${curAtomicOutcomeSlotCount} and contract reported value ${atomicOutcomeSlotCount}`);\n  }\n\n  const positions = [];\n\n  for (const outcomes of product(...markets.slice().reverse().map(({\n    conditionId,\n    outcomes,\n    marketIndex\n  }) => outcomes.map((outcome, outcomeIndex) => ({ ...outcome,\n    conditionId,\n    marketIndex,\n    outcomeIndex\n  }))))) {\n    const positionId = soliditySha3({\n      t: "address",\n      v: collateral.address\n    }, {\n      t: "uint",\n      v: outcomes.map(({\n        collectionId\n      }) => collectionId).map(id => web3.utils.toBN(id)).reduce((a, b) => a.add(b)).maskn(256)\n    });\n    positions.push({\n      id: positionId,\n      outcomes\n    });\n  }\n\n  positions.forEach((position, i) => {\n    position.positionIndex = i;\n  });\n\n  for (const market of markets) {\n    for (const outcome of market.outcomes) {\n      outcome.positions = [];\n    }\n  }\n\n  for (const position of positions) {\n    for (const outcome of position.outcomes) {\n      markets[outcome.marketIndex].outcomes[outcome.outcomeIndex].positions.push(position);\n    }\n  }\n\n  return {\n    web3,\n    networkId,\n    pmSystem,\n    lmsrMarketMaker,\n    collateral,\n    markets,\n    positions\n  };\n}\n\nasync function getAccount(web3) {\n  if (web3.defaultAccount == null) {\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts.length === 0) {\n      throw new Error(`got no accounts from ethereum provider`);\n    }\n\n    return accounts[0];\n  }\n\n  return web3.defaultAccount;\n}\n\nasync function validateNetworkId(web3, networkId) {\n  const web3NetworkId = await web3.eth.net.getId();\n  if (web3NetworkId != networkId) throw new Error(`interface expects ${networkId} but currently connected to ${web3NetworkId}`);\n}\n\nasync function getCollateralBalance(web3, collateral, account) {\n  const collateralBalance = {};\n  collateralBalance.amount = await collateral.contract.balanceOf(account);\n\n  if (collateral.isWETH) {\n    collateralBalance.unwrappedAmount = web3.utils.toBN((await web3.eth.getBalance(account)));\n    collateralBalance.totalAmount = collateralBalance.amount.add(collateralBalance.unwrappedAmount);\n  } else {\n    collateralBalance.totalAmount = collateralBalance.amount;\n  }\n\n  return collateralBalance;\n}\n\nasync function getLMSRState(web3, pmSystem, lmsrMarketMaker, positions) {\n  const {\n    fromWei\n  } = web3.utils;\n  const [owner, funding, stage, fee, positionBalances] = await Promise.all([lmsrMarketMaker.owner(), lmsrMarketMaker.funding(), lmsrMarketMaker.stage().then(stage => ["Running", "Paused", "Closed"][stage.toNumber()]), lmsrMarketMaker.fee().then(fee => fromWei(fee)), getPositionBalances(pmSystem, positions, lmsrMarketMaker.address)]);\n  return {\n    owner,\n    funding,\n    stage,\n    fee,\n    positionBalances\n  };\n}\n\nasync function getMarketResolutionStates(pmSystem, markets) {\n  return await Promise.all(markets.map(async ({\n    conditionId,\n    outcomes\n  }) => {\n    const payoutDenominator = await pmSystem.payoutDenominator(conditionId);\n\n    if (payoutDenominator.gtn(0)) {\n      const payoutNumerators = await Promise.all(outcomes.map((_, outcomeIndex) => pmSystem.payoutNumerators(conditionId, outcomeIndex)));\n      return {\n        isResolved: true,\n        payoutNumerators,\n        payoutDenominator\n      };\n    } else return {\n      isResolved: false\n    };\n  }));\n}\n\nasync function getPositionBalances(pmSystem, positions, account) {\n  return await Promise.all(positions.map(position => pmSystem.balanceOf(account, position.id)));\n}\n\nasync function getLMSRAllowance(collateral, lmsrMarketMaker, account) {\n  return await collateral.contract.allowance(account, lmsrMarketMaker.address);\n}\n\nPromise.all([__webpack_require__.e(/* import() */ 14).then(__webpack_require__.t.bind(null, 1, 7)), __webpack_require__.e(/* import() */ 8).then(__webpack_require__.t.bind(null, 16, 7)), __webpack_require__.e(/* import() */ 17).then(__webpack_require__.t.bind(null, 2, 7)), __webpack_require__.e(/* import() */ 13).then(__webpack_require__.bind(null, 17)), __webpack_require__.e(/* import() */ 1).then(__webpack_require__.t.bind(null, 4, 7)), Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(1), __webpack_require__.e(6)]).then(__webpack_require__.bind(null, 20)), Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(1), __webpack_require__.e(4)]).then(__webpack_require__.bind(null, 18)), Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(1), __webpack_require__.e(5)]).then(__webpack_require__.bind(null, 19)), __webpack_require__.e(/* import() */ 7).then(__webpack_require__.bind(null, 5))]).then(([{\n  default: React,\n  useState,\n  useEffect\n}, {\n  render\n}, {\n  default: cn\n}, {\n  default: useInterval\n}, {\n  default: Decimal\n}, {\n  default: Markets\n}, {\n  default: BuySection\n}, {\n  default: YourPositions\n}, {\n  default: Spinner\n}]) => {\n  Decimal.config({\n    precision: 80,\n    rounding: Decimal.ROUND_FLOOR\n  });\n  const moduleLoadTime = Date.now();\n\n  function RootComponent() {\n    const [loading, setLoading] = useState("LOADING");\n    const [syncTime, setSyncTime] = useState(moduleLoadTime);\n\n    function triggerSync() {\n      setSyncTime(Date.now());\n    }\n\n    useInterval(triggerSync, 2000);\n    const [networkId, setNetworkId] = useState(null);\n    const [web3, setWeb3] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [pmSystem, setPMSystem] = useState(null);\n    const [lmsrMarketMaker, setLMSRMarketMaker] = useState(null);\n    const [collateral, setCollateral] = useState(null);\n    const [markets, setMarkets] = useState(null);\n    const [positions, setPositions] = useState(null);\n    useEffect(() => {\n      loadWeb3().then(({\n        web3,\n        account\n      }) => (setWeb3(web3), setAccount(account), loadBasicData(web3, Decimal))).then(async ({\n        web3,\n        networkId,\n        pmSystem,\n        lmsrMarketMaker,\n        collateral,\n        markets,\n        positions\n      }) => {\n        setNetworkId(networkId);\n        setPMSystem(pmSystem);\n        setLMSRMarketMaker(lmsrMarketMaker);\n        setCollateral(collateral);\n        setMarkets(markets);\n        setPositions(positions);\n        await validateNetworkId(web3, networkId);\n        setLoading("SUCCESS");\n      }).catch(err => {\n        setLoading("FAILURE");\n        throw err;\n      });\n    }, []);\n    const [lmsrState, setLMSRState] = useState(null);\n    const [marketResolutionStates, setMarketResolutionStates] = useState(null);\n    const [collateralBalance, setCollateralBalance] = useState(null);\n    const [positionBalances, setPositionBalances] = useState(null);\n    const [lmsrAllowance, setLMSRAllowance] = useState(null);\n\n    for (const [loader, dependentParams, setter] of [[getLMSRState, [web3, pmSystem, lmsrMarketMaker, positions], setLMSRState], [getMarketResolutionStates, [pmSystem, markets], setMarketResolutionStates], [getCollateralBalance, [web3, collateral, account], setCollateralBalance], [getPositionBalances, [pmSystem, positions, account], setPositionBalances], [getLMSRAllowance, [collateral, lmsrMarketMaker, account], setLMSRAllowance]]) useEffect(() => {\n      if (dependentParams.every(p => p != null)) loader(...dependentParams).then(setter).catch(err => {\n        throw err;\n      });\n    }, [...dependentParams, syncTime]);\n\n    const [marketSelections, setMarketSelections] = useState(null);\n    const [stagedTradeAmounts, setStagedTradeAmounts] = useState(null);\n    const [stagedTransactionType, setStagedTransactionType] = useState(null);\n    const [ongoingTransactionType, setOngoingTransactionType] = useState(null);\n\n    function asWrappedTransaction(wrappedTransactionType, transactionFn, setError) {\n      return async function wrappedAction() {\n        if (ongoingTransactionType != null) {\n          throw new Error(`Attempted to ${wrappedTransactionType} while transaction to ${ongoingTransactionType} is ongoing`);\n        }\n\n        try {\n          setOngoingTransactionType(wrappedTransactionType);\n          await transactionFn();\n        } catch (e) {\n          setError(e);\n          throw e;\n        } finally {\n          setOngoingTransactionType(null);\n          triggerSync();\n        }\n      };\n    }\n\n    if (loading === "SUCCESS") return React.createElement("div", {\n      className: cn("page")\n    }, React.createElement("section", {\n      className: cn("section", "market-section")\n    }, React.createElement("h1", {\n      className: cn("page-title")\n    }, "Gnosis PM 2.0 Experiments"), React.createElement(Markets, {\n      markets,\n      marketResolutionStates,\n      positions,\n      lmsrState,\n      marketSelections,\n      setMarketSelections,\n      stagedTradeAmounts\n    })), React.createElement("div", {\n      className: cn("seperator")\n    }), React.createElement("section", {\n      className: cn("section", "position-section")\n    }, React.createElement("h2", {\n      className: cn("heading")\n    }, "Manage Positions"), React.createElement(BuySection, {\n      account,\n      markets,\n      positions,\n      collateral,\n      collateralBalance,\n      lmsrMarketMaker,\n      lmsrState,\n      lmsrAllowance,\n      marketSelections,\n      stagedTradeAmounts,\n      setStagedTradeAmounts,\n      stagedTransactionType,\n      setStagedTransactionType,\n      ongoingTransactionType,\n      asWrappedTransaction\n    }), React.createElement(YourPositions, {\n      account,\n      pmSystem,\n      markets,\n      marketResolutionStates,\n      positions,\n      collateral,\n      lmsrMarketMaker,\n      lmsrState,\n      positionBalances,\n      stagedTradeAmounts,\n      setStagedTradeAmounts,\n      stagedTransactionType,\n      setStagedTransactionType,\n      ongoingTransactionType,\n      asWrappedTransaction\n    })));\n    if (loading === "LOADING") return React.createElement("div", {\n      className: cn("loading-page")\n    }, React.createElement(Spinner, {\n      centered: true,\n      inverted: true,\n      width: 100,\n      height: 100\n    }));\n    if (loading === "FAILURE") return React.createElement("div", {\n      className: cn("failure-page")\n    }, React.createElement("h2", null, "Failed to load \\uD83D\\uDE1E"), React.createElement("h3", null, "Please check the following:"), React.createElement("ul", null, React.createElement("li", null, "Connect to correct network (", getNetworkName(networkId), ")"), React.createElement("li", null, "Install/Unlock Metamask")));\n  }\n\n  const rootElement = document.getElementById("root");\n  render(React.createElement(RootComponent, null), rootElement);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);